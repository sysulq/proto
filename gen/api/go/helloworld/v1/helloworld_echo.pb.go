// Code generated by github.com/douyu/jupiter-layout/cmd/protoc-gen-go-echo. DO NOT EDIT.

package helloworldv1

import (
	context "context"
	v4 "github.com/labstack/echo/v4"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the douyu/jupiter-layout/cmd/protoc-gen-go-echo package it is being compiled against.
// http.context.metadata.
// v4.

type GreeterServiceHTTPServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterGreeterServiceHTTPServer(r *v4.Echo, srv GreeterServiceHTTPServer) {
	s := GreeterService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type GreeterService struct {
	server GreeterServiceHTTPServer
	router *v4.Echo
}

func (s *GreeterService) SayHello_0(ctx v4.Context) error {
	var in SayHelloRequest
	if err := ctx.Bind(&in); err != nil {
		ctx.Error(v4.NewHTTPError(200, err))
		return nil
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request().Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request().Context(), md)
	out, err := s.server.(GreeterServiceHTTPServer).SayHello(newCtx, &in)
	if err != nil {
		ctx.Error(v4.NewHTTPError(200, err))
		return nil
	}

	return ctx.JSON(http.StatusOK, out)
}

func (s *GreeterService) RegisterService() {
	s.router.Add("POST", "/v1/helloworld.Greeter/SayHello", s.SayHello_0)
}
